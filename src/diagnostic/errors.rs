use std::fmt;

/// CScript 项目的结构化错误码枚举。
///
/// 每个错误码都对应一个特定的编译错误，便于追踪、文档化和测试。
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum ErrorCode {
    // =======================================================
    // == 词法分析错误 (Lexer Errors) :: E0001 - E0999
    // =======================================================

    /// E0001: 在源代码中出现了无法识别的非法字符。
    E0001,
    /// E0002: 使用了当前语言版本不支持的操作符。
    E0002,
    /// E0003: 多行注释 `/* ...` 没有找到对应的结束符 `*/`。
    E0003,
    /// E0004: 字符串字面量 `"` 没有找到对应的结束符 `"`。
    E0004,
    /// E0005: 字符字面量 `'` 不合法，可能未闭合或包含多个字符。
    E0005,
    /// E0006: 出现了未知的转义序列，例如 `\z`。
    E0006,
    /// E0007: 十六进制转义序列 `\x` 后面必须跟1到2个十六进制数字。
    E0007,
    /// E0015: 十六进制整型字面量 `0x` 后面必须跟至少一个十六进制数字。
    E0015,
    /// E0016: 整数字面量的值超出了 64 位整数的表示范围。
    E0016,

    // =======================================================
    // == 语法分析错误 (Parser Errors) :: E1000 - E1999
    // =======================================================

    /// E1001: 遇到了非预期的 Token。这是最常见的语法错误，通常在需要特定符号但却得到其他符号时报告。
    E1001,
    /// E1002: 期望一个顶层声明（例如函数或全局变量）。
    E1002,
    /// E1003: 期望一个标识符（例如变量名或函数名）。
    E1003,
    /// E1004: 期望一个类型说明符（例如 `int`, `char*`）。
    E1004,
    /// E1005: 期望一个表达式。
    E1005,
    /// E1006: 期望一个语句或代码块。
    E1006,
    /// E1007: 期望一个左括号 `(`。
    E1007,
    /// E1008: 期望一个右括号 `)`。
    E1008,
    /// E1009: 期望一个左大括号 `{`。
    E1009,
    /// E1010: 期望一个右大括号 `}`。
    E1010,
    /// E1011: 期望一个分号 `;` 来结束语句。
    E1011,

    // =======================================================
    // == 语义分析错误 (Semantic Errors) :: E2000 - E2999
    // =======================================================

    /// E2001: 类型不匹配。这是一个通用的类型错误，用于赋值、传参等多种场景。
    E2001,
    
    /// E2002: 使用了未声明的标识符（变量或函数）。
    E2002,

    /// E2003: 重复定义。在同一个作用域内，一个标识符已经被定义过。
    E2003,

    /// E2004: 尝试调用一个非函数类型的变量。
    E2004,

    /// E2005: 函数调用时的参数数量与函数定义不匹配。
    E2005,
    
    /// E2006: 操作符的运算对象类型错误。例如，对非整型变量使用 `%`，或对非布尔值使用 `&&`。
    E2006,
    
    /// E2007: `return` 语句的返回值类型与函数声明的返回类型不匹配。
    E2007,

    /// E2008: `if` 或 `while` 语句的条件表达式类型不是 `bool`。
    E2008,

    /// E2009: 尝试解引用一个非指针类型的变量。
    E2009,
    
    /// E2010: 尝试对一个不能被赋值的表达式进行赋值（即左值（L-Value）错误）。例如 `5 = x;`。
    E2010,

    /// E2011: 尝试对一个右值（R-Value，例如一个立即数）进行取地址操作。例如 `&10;`。
    E2011,

    /// E2012: 全局变量初始化必须是常量
    E2012, 
    /// E2013: 函数可能未返回值
    E2013, 
}

impl fmt::Display for ErrorCode {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        // 使用 Debug Trait 的实现来直接输出枚举成员的名称，例如 "E1001"
        write!(f, "{:?}", self)
    }
}
